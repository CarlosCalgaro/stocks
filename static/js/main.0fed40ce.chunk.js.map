{"version":3,"sources":["logo.svg","api/stocks/StocksApi.js","stocks/stocks.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","StocksApi","API","baseUrl","Stocks","byName","name","url","fetch","then","response","json","getPrice","symbol","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","stockName","companyName","stockSymbol","stockPrice","ceo","timer","moment","assertThisInitialized","tick","bind","refreshData","parseTimer","setState","format","setInterval","_this2","CEO","react_default","a","createElement","Card_default","className","Body","Title","Subtitle","Text","Component","App","items","i","push","stocks","Container_default","Row_default","Col_default","md","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fed40ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nvar StocksApi = {\n    \n    API: {\n        baseUrl: 'https://api.iextrading.com/1.0/'\n    },\n\n    Stocks: {\n        byName: (name) => {\n            let url = StocksApi.API.baseUrl + 'stock/' + name + '/company';\n            return fetch(url).then(response => response.json());\n        },\n\n        getPrice: (symbol) => {\n            let url = StocksApi.API.baseUrl + \"stock/\" + symbol + \"/price\";\n            return fetch(url).then(response => response.json());\n        }\n    }\n};\n\nexport default StocksApi;","import React, { Component } from 'react';\nimport StocksApi from '../api/stocks/StocksApi';\nimport Card from 'react-bootstrap/Card';\nimport moment from 'moment';\n\n\nclass Stocks extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            stockName:   \"\",\n            companyName: \"\",\n            stockSymbol: this.props.stockSymbol, \n            stockPrice:  0,\n            ceo: \"\",\n            timer: moment(),\n        };\n        var self = this;\n        this.tick = this.tick.bind(this);\n        this.refreshData = this.refreshData.bind(this);\n        this.parseTimer = this.parseTimer.bind(this);\n        this.refreshData();\n    }\n\n    tick(){\n        this.refreshData();\n        this.setState({\n            timer: moment()\n        })\n    }\n\n    parseTimer(){\n        return this.state.timer.format(\"DD/MM/YYYY h:mm:ss\");\n    }\n\n    componentDidMount() {\n            setInterval( this.tick(), 10000)\n     }\n    \n    refreshData(){\n        StocksApi.Stocks.getPrice(this.state.stockSymbol).then( (response) => {\n            this.setState({\n                stockPrice: response\n            })\n        });\n        StocksApi.Stocks.byName(this.state.stockSymbol).then( (response) => {\n            this.setState({\n                companyName: response.companyName,\n                ceo: response.CEO\n            });\n        });\n        \n    };\n\n    render(){\n       \n        return(\n            <Card className=\"stock-box\">\n                <Card.Body>\n                    <Card.Title>{this.state.stockSymbol}</Card.Title>\n                    <Card.Subtitle className=\"mb-2 text-muted\">{this.state.companyName}</Card.Subtitle>\n                    <Card.Text className=\"stock-text\">\n                        Pre√ßo: U$ {this.state.stockPrice}\n                        <br></br>\n                        Ceo: {this.state.ceo}\n                        <br></br>\n                        <small className=\"text-muted\">Last updated: {this.parseTimer()}</small>\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        );\n    }\n\n}\n\nexport default Stocks;\n","import React, { Component } from 'react';\nimport Stocks from './stocks/stocks.js';\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport logo from './logo.svg';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n\n    \n    const items = [];\n    for (var i=0; i < 10; i++){\n      items.push(<Stocks></Stocks>)\n    }\n\n    return (\n      \n      <div className=\"App\">\n\n        <Container>\n            <Row>\n              <Col md={4}>\n                <Stocks stockSymbol=\"AAPL\"></Stocks>\n              </Col>\n              <Col md={4}>\n                <Stocks stockSymbol=\"GOOGL\"></Stocks>\n              </Col>\n              <Col md={4}>\n                <Stocks stockSymbol=\"MSFT\"></Stocks>\n              </Col>\n\n            </Row>\n          </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Bootstrap from 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}